//
//  MoreInteractionViewController.m
//  FamilysHelper
//
//  Created by zhouwengang on 15/6/17.
//  Copyright (c) 2015年 FamilyTree. All rights reserved.
//

#import "MoreInteractionViewController.h"
#import "EGOTableView.h"
#import "IndexService.h"
#import "TopicModel.h"
#import "MoreInteractCell.h"
#import "TopicDetailController.h"
#import "SelectTagsViewController.h"

@interface MoreInteractionViewController () <UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate, EGOTableViewDelegate, UISearchControllerDelegate, UISearchDisplayDelegate> {
    ASIHTTPRequest* _request;
    BOOL _iRefresh;
}
@property (nonatomic, strong) EGOTableView* tableView;
@property (nonatomic, assign) BOOL refreshing;
@property (nonatomic, strong) DataModel* dataModel;
@property (nonatomic, strong) UISearchDisplayController* searchDisp;
@property (nonatomic, strong) UISearchBar* searchBar;
@property (nonatomic, strong) NSMutableArray* searchResults;
@property (nonatomic,strong) NSString * tagsId;;

@end

@implementation MoreInteractionViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    [self setWhiteNavBg];
    [self initView];
    _tagsId = @"";
    _dataModel = [AppCache loadCache:[NSString stringWithFormat:@"%@%@",CACHE_INDEX_MOREINTERSACTION,_tagsId]];
    _iRefresh = NO;
    if (!_dataModel) {
        [_tableView launchRefreshing];
    }
}

- (void)initView
{
    self.view.backgroundColor = [UIColor whiteColor];
    self.automaticallyAdjustsScrollViewInsets = NO;

    _searchResults = [[NSMutableArray alloc] initWithCapacity:0];

    UILabel* titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(SCREEN_WIDTH - 80, 14, SCREEN_WIDTH - 160, 17)];
    titleLabel.textAlignment = NSTextAlignmentCenter;
    titleLabel.text = @"更多互动";
    titleLabel.font = [UIFont systemFontOfSize:20];
    titleLabel.textColor = COLOR_RED_DEFAULT_78;
    self.navigationItem.titleView = titleLabel;
    
    UIBarButtonItem* rightButton = [[UIBarButtonItem alloc] initWithTitle:@"筛选" style:UIBarButtonItemStylePlain target:self action:@selector(onBtnSelect:)];
    self.navigationItem.rightBarButtonItem = rightButton;

    _tableView = [[EGOTableView alloc] initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT - TopBarHeight - 20)];
    _tableView.backgroundColor = [UIColor whiteColor];
    _tableView.backgroundView = nil;
    _tableView.dataSource = self;
    _tableView.delegate = self;
    _tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    _tableView.pullingDelegate = self;
    _tableView.autoScrollToNextPage = NO;
    [self.view addSubview:_tableView];

    _searchBar = [[UISearchBar alloc] initWithFrame:CGRectMake(0, 50, SCREEN_WIDTH, SearchBarHeight)];
    _searchBar.barTintColor = TableSeparatorColor;
    [_searchBar setBackgroundColor:COLOR_GRAY_LIGHT];

    _searchBar.placeholder = @"搜索";
    _searchBar.delegate = self;
    _searchBar.keyboardType = UIKeyboardAppearanceDefault;
    _tableView.tableHeaderView = _searchBar; //把搜索框放在表头

    //创建SearchDisplayController并与SearchBar关联
    //参数一：要关联的SearchBar
    //参数二：要搜索的那个TableView所在的视图控制器
    _searchDisp = [[UISearchDisplayController alloc] initWithSearchBar:_searchBar contentsController:self];
    _searchDisp.searchResultsDataSource = self;
    _searchDisp.searchResultsDelegate = self;
}

- (void)pullingTableViewDidStartRefreshing:(EGOTableHeaderView*)tableView
{
    if (_dataModel) {
        _dataModel.nextCursor = 0;
        _dataModel.previousCursor = 0;
    }
    _iRefresh = YES;
    [self loadData];
}

- (void)pullingTableViewDidStartLoading:(EGOTableView*)tableView
{
    _iRefresh = NO;
    [self loadData];
}

- (NSDate*)pullingTableViewRefreshingFinishedDate
{

    return [NSDate date];
}

- (NSDate*)pullingTableViewLoadingFinishedDate
{

    return [NSDate date];
}

- (void)loadData
{
    
    if (_request) {
        [_request cancel];
    }
    
    _request = [[IndexService shareInstance]
        getMorePublishContentFrontPageV2:1
                              tags:_tagsId
                              nextCursor:_dataModel.nextCursor
                               onSuccess:^(DataModel* dataModel) {

                                   if (dataModel.code == 200) {

                                       if (_dataModel) {
                                           if (_iRefresh)
                                               [_dataModel.data removeAllObjects];

                                           [_dataModel.data addObjectsFromArray:dataModel.data];
                                           _dataModel.code = dataModel.code;
                                           _dataModel.nextCursor = dataModel.nextCursor;
                                           _dataModel.previousCursor = dataModel.previousCursor;
                                           _dataModel.error = dataModel.error;
                                       }
                                       else
                                           _dataModel = dataModel;
                                       if ([_tagsId isEqualToString:@""]) {
                                        [AppCache saveCache:[NSString stringWithFormat:@"%@%@",CACHE_INDEX_MOREINTERSACTION,_tagsId] Data:_dataModel];
                                       }


                                       if (_dataModel.previousCursor == _dataModel.nextCursor) {
                                           _tableView.reachedTheEnd = YES;
                                       }
                                       else {
                                           _tableView.reachedTheEnd = NO;
                                       }
                                       [_tableView reloadData];
                                   }
                                   else {

                                       [ToastManager showToast:dataModel.error withTime:Toast_Hide_TIME];
                                       _tableView.reachedTheEnd = NO;
                                   }

                                   [_tableView tableViewDidFinishedLoading];

                               }];
}

- (NSInteger)numberOfSectionsInTableView:(UITableView*)tableView
{
    if (tableView != _tableView) {

        [_searchResults removeAllObjects];

        for (TopicModel* topic in _dataModel.data) {

            NSRange range = [topic.topic rangeOfString:_searchBar.text];
            if (range.location != NSNotFound) {
                [_searchResults addObject:topic];
            }
        }

        return 1;
    }
    else {
        return 1;
    }
}

- (NSInteger)tableView:(UITableView*)tableView numberOfRowsInSection:(NSInteger)section
{
    if (tableView != _tableView) {

        return _searchResults.count;
    }
    else {
        return ((NSArray*)_dataModel.data).count;
    }
}

- (UITableViewCell*)tableView:(UITableView*)tableView cellForRowAtIndexPath:(NSIndexPath*)indexPath
{
    if (tableView != _tableView) {

        static NSString* moreCellId = @"MoreInteractionCell";
        MoreInteractCell* moreInteractionCell = [tableView dequeueReusableCellWithIdentifier:moreCellId];
        if (!moreInteractionCell) {
            moreInteractionCell = [[MoreInteractCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:moreCellId];
            moreInteractionCell.selectionStyle = UITableViewCellSelectionStyleNone;
            moreInteractionCell.backgroundColor = COLOR_RED_DEFAULT_BackGround;
        }

        [moreInteractionCell bindModel:_searchResults[indexPath.row]];
        return moreInteractionCell;
    }

    static NSString* moreCellId = @"MoreInteractionCell";
    MoreInteractCell* moreInteractionCell = [tableView dequeueReusableCellWithIdentifier:moreCellId];
    if (!moreInteractionCell) {
        moreInteractionCell = [[MoreInteractCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:moreCellId];
        moreInteractionCell.selectionStyle = UITableViewCellSelectionStyleNone;
        moreInteractionCell.backgroundColor = COLOR_RED_DEFAULT_BackGround;
    }

    [moreInteractionCell bindModel:_dataModel.data[indexPath.row]];
    return moreInteractionCell;
}

- (CGFloat)tableView:(UITableView*)tableView heightForRowAtIndexPath:(NSIndexPath*)indexPath
{
    return 66;
}

- (void)tableView:(UITableView*)tableView didSelectRowAtIndexPath:(NSIndexPath*)indexPath
{
    if (tableView == _tableView) {

        TopicModel* topicModel = _dataModel.data[indexPath.row];
        TopicDetailController* topicVc = [[TopicDetailController alloc] init];
        topicVc.tribeId = topicModel.tribeld;
        topicVc.publishID = topicModel.publishId;
        [self.navigationController pushViewController:topicVc animated:YES];
    }
    else {

        TopicModel* topicModel = _searchResults[indexPath.row];
        TopicDetailController* topicVc = [[TopicDetailController alloc] init];
        topicVc.tribeId = topicModel.tribeld;
        topicVc.publishID = topicModel.publishId;
        [self.navigationController pushViewController:topicVc animated:YES];
    }
}

#pragma mark -
-(void)onBtnSelect:(UIBarButtonItem *)sender{
    
    SelectTagsViewController *selectVc = [[SelectTagsViewController alloc]init];
    selectVc.tagsBlock = ^(NSInteger tagID){
        _tagsId = [NSString stringWithFormat:@"%d",tagID];
        if (_dataModel) {
            _dataModel.nextCursor = 0;
            _dataModel.previousCursor = 0;
        }
        _iRefresh = YES;
        [self loadData];
    };
    [self.navigationController pushViewController:selectVc animated:YES];
}


#pragma mark UIScrollViewDelegate

- (void)scrollViewDidScroll:(UIScrollView*)scrollView
{

    [_tableView tableViewDidScroll:scrollView];
}

- (void)scrollViewDidEndDragging:(UIScrollView*)scrollView willDecelerate:(BOOL)decelerate
{

    [_tableView tableViewDidEndDragging:scrollView];
}

#pragma mark
#pragma mark--ButtonTaget

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end

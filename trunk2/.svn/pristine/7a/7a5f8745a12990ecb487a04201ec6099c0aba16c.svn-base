//
//  BangCommentCell.m
//  FamilysHelper
//
//  Created by 我 on 15/7/3.
//  Copyright (c) 2015年 FamilyTree. All rights reserved.
//

#import "BangCommentCell.h"
#import "UIImageView+AFNetworking.h"
#import "EGOImageView.h"
#import "ActivityModel.h"
#import <CoreText/CoreText.h>
#import "UIView+Toast.h"
#import "TribeService.h"
#import "TagSingTon.h"
#import "CommentModel.h"
#import "ImgModel.h"
#import "activityCommentView.h"
#import "ActivityCommentViewController.h"


@implementation BangCommentCell {
    EGOImageView* _face;
    UILabel* _nickname;
    UILabel* _replyContent;
    UILabel* _time;

    EGOImageView* _imageUrl;
    UILabel* _commentContent;
    UILabel* _commentNickName;
    UIButton* _btnPrise;
    UIScrollView* _scrollView;
    UIView* _backgroundView;
    CommentModel* _model;
    DataModel* _dataModel;
    ASIHTTPRequest *_request;
    ActivityCommentViewController *_activityComment;
    
    UIView *_commentView;
    NSInteger _row;
    UILabel* _topGary;
    
    NSMutableArray *_imgsList;
    CXPhotoBrowser *_browser;
}

@synthesize messageListner;

- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString*)reuseIdentifier
{

    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
    if (self) {

        _browser = [[CXPhotoBrowser alloc]initWithDataSource:self delegate:self];
        _browser.wantsFullScreenLayout = YES;
        _imgsList = [[NSMutableArray alloc]initWithCapacity:0];
        
        _activityComment = [[ActivityCommentViewController alloc] init];
        _backgroundView = [[UIView alloc] initWithFrame:CGRectMake(0, 10, SCREEN_WIDTH, 135)];
        _backgroundView.backgroundColor = [UIColor whiteColor];
        [self addSubview:_backgroundView];

        _face = [[EGOImageView alloc] initWithPlaceholderImage:[UIImage imageNamed:@"pic_default_40x40"]];
        _face.frame = CGRectMake(10, 10, 32, 32);
        _face.layer.cornerRadius = 16;
        _face.clipsToBounds = YES;
        [_backgroundView addSubview:_face];

        _nickname = [[UILabel alloc] initWithFrame:CGRectMake(52, 10, 90, 32)];
        _nickname.textColor = COLOR_GRAY_DEFAULT_OPAQUE_7a;
        _nickname.font = [UIFont systemFontOfSize:14];
        [_backgroundView addSubview:_nickname];

        _informButton = [UIButton buttonWithType:UIButtonTypeCustom];
        _informButton.frame = CGRectMake(SCREEN_WIDTH - 50, 15, 40, 20);
        [_informButton setTitle:@"举报" forState:UIControlStateNormal];
        _informButton.titleLabel.font = [UIFont systemFontOfSize:8];
        _informButton.layer.borderWidth = 0.8;
        _informButton.layer.cornerRadius = 4;
        _informButton.clipsToBounds = YES;
        CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
        CGColorRef borderColorRef = CGColorCreate(colorSpace, (CGFloat[]){ 0.9, 0, 0, 1 });
        CGColorSpaceRelease(colorSpace);

        _informButton.layer.borderColor = borderColorRef;
        CGColorRelease(borderColorRef);
        [_informButton setTitleColor:RedColor1 forState:UIControlStateNormal];
        [_informButton addTarget:self
                          action:@selector(onBtnInform:)
                forControlEvents:UIControlEventTouchUpInside];
        [_backgroundView addSubview:_informButton];

        _time = [[UILabel alloc] initWithFrame:CGRectMake(SCREEN_WIDTH - 160, 10, 100, 32)];
        _time.textColor = COLOR_GRAY_DEFAULT_OPAQUE_7a;
        _time.font = [UIFont systemFontOfSize:14];
        _time.textAlignment = NSTextAlignmentRight;
        [_backgroundView addSubview:_time];

        _replyContent = [[UILabel alloc] initWithFrame:CGRectMake(10, 52, SCREEN_WIDTH - 20, 30)];
        _replyContent.numberOfLines = 0;
        _replyContent.textColor = COLOR_RED_DEFAULT_04;
        _replyContent.font = [UIFont systemFontOfSize:15];
        [_backgroundView addSubview:_replyContent];

        //----------------------------------------UISCrollView-------------------------------------------------------//
        _scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(10, 80, SCREEN_WIDTH - 10, 0)];
        _scrollView.bounces = NO;
        _scrollView.showsHorizontalScrollIndicator = NO;
        _scrollView.showsVerticalScrollIndicator = NO;
        _scrollView.backgroundColor = [UIColor whiteColor];
        

        _topGary = [[UILabel alloc] initWithFrame:CGRectMake(10, 89, SCREEN_WIDTH - 20, 1)];
        _topGary.backgroundColor = COLOR_RED_DEFAULT_BackGround;
        [_backgroundView addSubview:_topGary];

        _commentView = [[UIView alloc]initWithFrame:CGRectMake(0, 90, SCREEN_WIDTH, 0)];
        _commentView.backgroundColor = [UIColor whiteColor];

        _btnComment = [UIButton buttonWithType:UIButtonTypeCustom];
        _btnComment.frame = CGRectMake(SCREEN_WIDTH - 100, 100 , 40, 20);
        _btnComment.titleLabel.font = [UIFont systemFontOfSize:9];
        [_btnComment addTarget:self
                        action:@selector(onBtnComment:)
              forControlEvents:UIControlEventTouchUpInside];
        [_btnComment setTitleColor:COLOR_GRAY_DEFAULT_185 forState:UIControlStateNormal];
        _btnComment.layer.borderWidth = 0.2;
        _btnComment.layer.cornerRadius = 4;
        _btnComment.clipsToBounds = YES;
        CGColorSpaceRef colorSpacecomment = CGColorSpaceCreateDeviceRGB();
        CGColorSpaceRelease(colorSpacecomment);
        CGColorRef borderColorRefcomment = CGColorCreate(colorSpacecomment, (CGFloat[]){ 0.1, 0.1, 0, 1 });
        _btnComment.layer.borderColor = borderColorRefcomment;
        CGColorRelease(borderColorRefcomment);
        [_backgroundView addSubview:_btnComment];

        _btnPrise = [UIButton buttonWithType:UIButtonTypeCustom];
        _btnPrise.frame = CGRectMake(SCREEN_WIDTH - 50, 100 , 40, 20);
        _btnPrise.titleLabel.font = [UIFont systemFontOfSize:9];
        [_btnPrise setTitleColor:COLOR_GRAY_DEFAULT_185 forState:UIControlStateNormal];
        [_btnPrise addTarget:self action:@selector(onBtnPrise:) forControlEvents:UIControlEventTouchUpInside];
        _btnPrise.layer.borderWidth = 0.2;
        _btnPrise.layer.cornerRadius = 4;
        _btnPrise.clipsToBounds = YES;
        CGColorSpaceRef colorSpaceprise = CGColorSpaceCreateDeviceRGB();
        CGColorRef borderColorRefprise = CGColorCreate(colorSpaceprise, (CGFloat[]){ 0.1, 0.1, 0, 1 });
        _btnPrise.layer.borderColor = borderColorRefprise;
        CGColorSpaceRelease(colorSpaceprise);
        CGColorRelease(borderColorRefprise);
        [_backgroundView addSubview:_btnPrise];

    }
    return self;
}

- (void)bindCommentModel:(CommentModel*)model row:(NSInteger)row
{
    _model = model;
    _row = row;
    
    [_face setImageWithURL:[AppImageUtil getImageURL:model.face Size:_face.frame.size]];

    [_nickname setText:model.nickname];
    [_time setText: [NSDate daySinceTimeInterval:model.createTime.doubleValue / 1000.0f]];
    [_replyContent setText:model.replyContent];
    
    if (model.imageList.count > 0 ) {
        _scrollView.frame = CGRectMake(_scrollView.frame.origin.x, _scrollView.frame.origin.y, _scrollView.frame.size.width, 90);
        [_backgroundView addSubview:_scrollView];
        _topGary.frame = CGRectMake(_topGary.frame.origin.x,89 + 90, _topGary.frame.size.width, _topGary.frame.size.height);
        _commentView.frame = CGRectMake(_commentView.frame.origin.x, 90 + 90, _commentView.frame.size.width, _commentView.frame.size.height);
        
        NSArray* viewsToRemove =_scrollView.subviews;
        for (UIView* v in viewsToRemove) {
            [v removeFromSuperview];
        }
        
        for (NSInteger i = 0; i < model.imageList.count; i++) {
            _imageUrl = [[EGOImageView alloc] init];
            _imageUrl.delegate = self;
            _imageUrl.tag = i + 1;
            _imageUrl.userInteractionEnabled = YES;
            _imageUrl.frame = CGRectMake(100 * i, 0, 90, 90);
            if (!((ActivityModel *)model.imageList[i]).imageName) {
                [_imageUrl setImage:[[UIImage alloc]initWithContentsOfFile:((ActivityModel *)model.imageList[i]).imagePath]];
            }
            else
                [_imageUrl setImageURL:[AppImageUtil getImageURL:((ActivityModel *)model.imageList[i]).imageName Size:_imageUrl.frame.size]];
            
            [_scrollView addSubview:_imageUrl];
        }
    }else
        [_scrollView removeFromSuperview];

    if (model.commentList.count > 0) {
        _commentView.frame = CGRectMake(_commentView.frame.origin.x,_commentView.frame.origin.y, SCREEN_WIDTH,  model.commentList.count * 30);
        [_backgroundView addSubview:_commentView];
        
        NSArray* viewsToRemove =_commentView.subviews;
        for (UIView* v in viewsToRemove) {
            [v removeFromSuperview];
        }
        
        for (NSInteger j = 0; j < model.commentList.count; j++) {
            _commentNickName = [[UILabel alloc] init];
            _commentNickName.textColor = COLOR_RED_DEFAULT_04;
            _commentNickName.font = [UIFont systemFontOfSize:12];
            _commentNickName.frame = CGRectMake(10, j*30, (((ActivityModel*)model.commentList[j]).commentNickName.length + 1) * 10, 30);
            [_commentNickName setText:[NSString stringWithFormat:@"%@:", ((ActivityModel*)model.commentList[j]).commentNickName]];
            [_commentView addSubview:_commentNickName];
            
            _commentContent = [[UILabel alloc] init];
            _commentContent.textColor = COLOR_GRAY_DEFAULT_OPAQUE_7a;
            _commentContent.font = [UIFont systemFontOfSize:12];
            _commentContent.frame = CGRectMake(_commentNickName.bounds.size.width + 15, j*30, SCREEN_WIDTH - _commentContent.bounds.origin.x, 30);
            [_commentContent setText:((ActivityModel*)model.commentList[j]).commentContent];
            [_commentView addSubview:_commentContent];
        }

    }else
        [_commentView removeFromSuperview];
    
    
    if (model.imageList.count > 0 ) {
        _btnComment.frame = CGRectMake(SCREEN_WIDTH - 100,100 + 90 + model.commentList.count * 30, _btnComment.frame.size.width, _btnComment.frame.size.height);
        _btnPrise.frame = CGRectMake(SCREEN_WIDTH - 50, 100 + 90 + model.commentList.count * 30, _btnPrise.frame.size.width, _btnPrise.frame.size.height);
    }else{
        _btnComment.frame = CGRectMake(SCREEN_WIDTH - 100, 100 + model.commentList.count * 30, _btnComment.frame.size.width, _btnComment.frame.size.height);
        _btnPrise.frame = CGRectMake(SCREEN_WIDTH - 50, 100 + model.commentList.count * 30, _btnPrise.frame.size.width, _btnPrise.frame.size.height);
    }
    
    _backgroundView.frame = CGRectMake(0, 10, SCREEN_WIDTH, _btnComment.frame.origin.y + _btnComment.frame.size.height + 15);

    [_btnComment setTitle:[NSString stringWithFormat:@"%ld", (long)model.commentNum] forState:UIControlStateNormal];
    [_btnComment setImage:[UIImage imageNamed:@"ic_discussl"] forState:UIControlStateNormal];
    _btnComment.titleEdgeInsets = UIEdgeInsetsMake(0, -_btnComment.titleLabel.frame.size.width + 12, 0, _btnComment.titleLabel.frame.size.width);
    _btnComment.imageEdgeInsets = UIEdgeInsetsMake(0, _btnComment.titleLabel.frame.size.width - 12, 0, 0);

    [_btnPrise setImage:[UIImage imageNamed:@"ic_recommend"] forState:UIControlStateNormal];
    [_btnPrise setTitle:[NSString stringWithFormat:@"%ld", (long)model.hitNum] forState:UIControlStateNormal];
    _btnPrise.titleEdgeInsets = UIEdgeInsetsMake(0, -_btnPrise.titleLabel.frame.size.width + 12, 0, _btnPrise.titleLabel.frame.size.width);
    _btnPrise.imageEdgeInsets = UIEdgeInsetsMake(0, _btnPrise.titleLabel.frame.size.width - 12, 0, 0);
 
    [self setNeedsDisplay];
}

#pragma mark -
#pragma mark EGOImageViewDelegate
- (void)imageViewLoadedImage : (EGOImageView*)imageView
{
    imageView.contentMode = UIViewContentModeScaleAspectFit;
}
- (void)imageViewFailedToLoadImage:(EGOImageView*)imageView error:(NSError*)error
{
    imageView.contentMode = UIViewContentModeScaleAspectFit;
}

#define MSG_IMAGE_INDEX_CONTEXT_PHOTO1 1
#define MSG_IMAGE_INDEX_CONTEXT_PHOTO2 2
#define MSG_IMAGE_INDEX_CONTEXT_PHOTO3 3
- (void)imageViewDidTouched:(EGOImageView*)imageView
{
    switch (imageView.tag) {
        case MSG_IMAGE_INDEX_CONTEXT_PHOTO1:
            [self showImgs:0];
            break;
        case MSG_IMAGE_INDEX_CONTEXT_PHOTO2:
            [self showImgs:1];
            break;
        case MSG_IMAGE_INDEX_CONTEXT_PHOTO3:
            [self showImgs:2];
            break;
        default:
            break;
    }
}


- (void)showImgs:(NSUInteger)aIndex
{
    [_imgsList removeAllObjects];
    for (int i = 0; i < _model.imageList.count; i++) {
        ActivityModel* model = [_model.imageList objectAtIndex:i];
        CXPhoto* photo;
        if (!model.imageName) {
            
             photo = [[CXPhoto alloc] initWithURL:[NSURL URLWithString:getOriginalImage(model.imagePath)]];
        }
             photo = [[CXPhoto alloc] initWithURL:[NSURL URLWithString:getOriginalImage(model.imageName)]];
        
        [_imgsList addObject:photo];
    }
 
    [_browser setInitialPageIndex:aIndex];
    _browser.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
    [self.window.rootViewController presentViewController:_browser animated:YES completion:^{
        
    }];
}


#pragma mark -
#pragma mark CXPhotoBrowserDataSource
- (NSUInteger)numberOfPhotosInPhotoBrowser:(CXPhotoBrowser*)photoBrowser
{
    return _imgsList.count;
}
- (id<CXPhotoProtocol>)photoBrowser:(CXPhotoBrowser*)photoBrowser photoAtIndex:(NSUInteger)index
{
    if (index < _imgsList.count)
        return [_imgsList objectAtIndex:index];
    return nil;
}

#pragma mark
#pragma mark-- UIButtonAction
- (void)onBtnPrise:(UIButton*)sender
{

    if (_request) {
        [_request cancel];
    }
    _request = [[TribeService shareInstance] priseActivityReply:[CurrentAccount currentAccount].uid
                                                       objectId:_model.replyId
                                                      OnSuccess:^(DataModel* dataModel) {
                                                          if (dataModel.code == 202) {
                                                              [self makeToast:@"点赞成功" duration:1.5 position:nil];
                                                              _model.hitNum = _model.hitNum + 1;
                                                              [_btnPrise setTitle:[NSString stringWithFormat:@"%ld", (long)_model.hitNum] forState:UIControlStateNormal];
                                                          }
                                                          else {
                                                              [self makeToast:dataModel.error duration:1.5 position:nil];
                                                          }

                                                      }];
}

#pragma mark
#pragma mark-- UIButtonAction
- (void)onBtnComment:(UIButton*)sender
{
    activityCommentView* commentView = [[activityCommentView alloc]
        initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)];
    commentView.messageListner = messageListner;
    commentView.selectRow = _row;
    commentView.type = 0;
    commentView.objectId = _model.replyId;
    [self.window.rootViewController.view addSubview:commentView];

}

- (void)onBtnInform:(UIButton*)sender
{

    activityCommentView* commentView = [[activityCommentView alloc]
        initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)];
    commentView.messageListner = _activityComment;
    commentView.type = 1;
    commentView.objectType = 2;
    commentView.objectId = _model.replyId;
    [self.window.rootViewController.view addSubview:commentView];
}
- (void)setSelected:(BOOL)selected animated:(BOOL)animated
{
    [super setSelected:selected animated:animated];

    // Configure the view for the selected state
}

@end
